{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Schwartza\\\\Desktop\\\\prog2020\\\\reactChat\\\\chat\\\\src\\\\components\\\\Socket.tsx\";\nimport React, { Component } from 'react';\n\nfunction initSocket() {\n  console.log(\"was called\");\n  const socket = new WebSocket(\"ws://127.0.0.1:5000?username=kantemir\");\n\n  socket.onopen = function (e) {\n    console.log(\"[open] Connection established\");\n    console.log(\"Sending to server\");\n    socket.send(\"hey server\");\n  };\n\n  socket.onmessage = function (event) {\n    console.log(`[message] Data received from server: ${event.data}`);\n  };\n\n  socket.onclose = function (event) {\n    if (event.wasClean) {\n      console.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);\n    } else {\n      // e.g. server process killed or network down\n      // event.code is usually 1006 in this case\n      console.log('[close] Connection died');\n    }\n  };\n\n  socket.onerror = function (error) {\n    console.log(`[error] ${error.message}`);\n  };\n\n  return socket;\n}\n\nexport default class Socket extends Component {\n  /* private socket: WebSocket; */\n  constructor(props) {\n    super(props);\n\n    this.sendRandomMessage = () => {\n      /* if (!this.socket) return\r\n      console.log(\"was called\");\r\n      this.socket.send(\"hey thats a test\"); */\n    };\n\n    console.log(\"called x times\");\n    /* this.socket = initSocket(); */\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    console.log(\"mount\");\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.sendRandomMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, \"send message\"));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Schwartza/Desktop/prog2020/reactChat/chat/src/components/Socket.tsx"],"names":["React","Component","initSocket","console","log","socket","WebSocket","onopen","e","send","onmessage","event","data","onclose","wasClean","code","reason","onerror","error","message","Socket","constructor","props","sendRandomMessage","state","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAIA,SAASC,UAAT,GAAsB;AAClBC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAEA,QAAMC,MAAM,GAAG,IAAIC,SAAJ,CAAc,uCAAd,CAAf;;AAEAD,EAAAA,MAAM,CAACE,MAAP,GAAgB,UAAUC,CAAV,EAAa;AACzBL,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAC,IAAAA,MAAM,CAACI,IAAP,CAAY,YAAZ;AACH,GAJD;;AAMAJ,EAAAA,MAAM,CAACK,SAAP,GAAmB,UAAUC,KAAV,EAAiB;AAChCR,IAAAA,OAAO,CAACC,GAAR,CAAa,wCAAuCO,KAAK,CAACC,IAAK,EAA/D;AACH,GAFD;;AAIAP,EAAAA,MAAM,CAACQ,OAAP,GAAiB,UAAUF,KAAV,EAAiB;AAC9B,QAAIA,KAAK,CAACG,QAAV,EAAoB;AAChBX,MAAAA,OAAO,CAACC,GAAR,CAAa,2CAA0CO,KAAK,CAACI,IAAK,WAAUJ,KAAK,CAACK,MAAO,EAAzF;AACH,KAFD,MAEO;AACH;AACA;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACH;AACJ,GARD;;AAUAC,EAAAA,MAAM,CAACY,OAAP,GAAiB,UAAUC,KAAV,EAAsB;AACnCf,IAAAA,OAAO,CAACC,GAAR,CAAa,WAAUc,KAAK,CAACC,OAAQ,EAArC;AACH,GAFD;;AAIA,SAAOd,MAAP;AACH;;AAWD,eAAe,MAAMe,MAAN,SAAqBnB,SAArB,CAA6C;AACxD;AACAoB,EAAAA,WAAW,CAACC,KAAD,EAAe;AACtB,UAAMA,KAAN;;AADsB,SAgB1BC,iBAhB0B,GAgBN,MAAM;AACtB;;;AAGH,KApByB;;AAEtBpB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AAEA;;AACA,SAAKoB,KAAL,GAAa,EAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBtB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAEH;;AAUDsB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,OAAO,EAAE,KAAKH,iBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,CADJ;AAKH;;AA/BuD","sourcesContent":["import React, { Component } from 'react'\r\n\r\n\r\n\r\nfunction initSocket() {\r\n    console.log(\"was called\");\r\n\r\n    const socket = new WebSocket(\"ws://127.0.0.1:5000?username=kantemir\");\r\n\r\n    socket.onopen = function (e) {\r\n        console.log(\"[open] Connection established\");\r\n        console.log(\"Sending to server\");\r\n        socket.send(\"hey server\");\r\n    };\r\n\r\n    socket.onmessage = function (event) {\r\n        console.log(`[message] Data received from server: ${event.data}`);\r\n    };\r\n\r\n    socket.onclose = function (event) {\r\n        if (event.wasClean) {\r\n            console.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);\r\n        } else {\r\n            // e.g. server process killed or network down\r\n            // event.code is usually 1006 in this case\r\n            console.log('[close] Connection died');\r\n        }\r\n    };\r\n\r\n    socket.onerror = function (error: any) {\r\n        console.log(`[error] ${error.message}`);\r\n    };\r\n\r\n    return socket;\r\n}\r\n\r\ninterface Props {\r\n\r\n}\r\ninterface State {\r\n\r\n}\r\n\r\n\r\n\r\nexport default class Socket extends Component<Props, State> {\r\n    /* private socket: WebSocket; */\r\n    constructor(props: Props) {\r\n        super(props)\r\n        console.log(\"called x times\");\r\n\r\n        /* this.socket = initSocket(); */\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"mount\");\r\n\r\n    }\r\n\r\n\r\n    sendRandomMessage = () => {\r\n        /* if (!this.socket) return\r\n        console.log(\"was called\");\r\n        this.socket.send(\"hey thats a test\"); */\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={this.sendRandomMessage}>send message</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}