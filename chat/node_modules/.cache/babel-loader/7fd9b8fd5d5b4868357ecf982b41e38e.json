{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Schwartza\\\\Desktop\\\\prog2020\\\\reactChat\\\\chat\\\\src\\\\App.tsx\";\nimport React, { Component } from 'react';\nimport SimplePeer from 'simple-peer';\nimport Socket from './components/Socket';\nimport './App.css';\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.peer = null;\n    this.state = {\n      textInput: '',\n      data: '',\n      connected: false\n    };\n\n    this.onChange = e => this.setState({\n      [e.target.name]: e.target.value\n    });\n\n    this.createPeer = (init = true) => {\n      this.peer = new SimplePeer({\n        initiator: init,\n        trickle: false\n      });\n      this.peer.on('error', err => console.log('error', err));\n      this.peer.on('signal', data => {\n        console.log('SIGNAL', data);\n        this.setState({\n          data: JSON.stringify(data, null, 2)\n        });\n      });\n      this.peer.on('connect', () => {\n        console.log('CONNECT');\n        this.setState({\n          connected: true,\n          data: ''\n        });\n        this.peer.send('any' + Math.random());\n      });\n      this.peer.on('data', data => {\n        console.log('data: ' + data);\n        this.setState({\n          data: String(data)\n        });\n      });\n    };\n\n    this.initConnection = () => this.createPeer(true);\n\n    this.joinConnection = () => this.createPeer(false);\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      this.signalOrMessage();\n    };\n\n    this.signalOrMessage = () => {\n      if (!this.peer) return;\n      console.log(this.state.connected);\n      if (this.state.connected) return this.peer.send(this.state.textInput);\n      this.peer.signal(JSON.parse(this.state.textInput));\n    };\n  }\n\n  componentDidMount() {//this.createPeer();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, this.state.connected ? 'connection created' : 'waiting for connection')), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.initConnection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, \"init connection\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.joinConnection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \"join connection\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      name: \"textInput\",\n      value: this.state.textInput,\n      cols: 60,\n      rows: 10,\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    })), this.state.data && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, this.state.connected ? 'message from your peer' : 'send the json string below to your peer to create a connection'), /*#__PURE__*/React.createElement(\"pre\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, this.state.data)), /*#__PURE__*/React.createElement(Socket, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Schwartza/Desktop/prog2020/reactChat/chat/src/App.tsx"],"names":["React","Component","SimplePeer","Socket","App","peer","state","textInput","data","connected","onChange","e","setState","target","name","value","createPeer","init","initiator","trickle","on","err","console","log","JSON","stringify","send","Math","random","String","initConnection","joinConnection","onSubmit","preventDefault","signalOrMessage","signal","parse","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SimplePeer from 'simple-peer';\nimport Socket from './components/Socket'\nimport './App.css';\n\n\n\n\nexport interface IAppProps {\n}\n\nexport default class App extends Component<IAppProps> {\n  peer: any = null;\n  state = {\n    textInput: '',\n    data: '',\n    connected: false\n  }\n\n  onChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => this.setState({ [e.target.name]: e.target.value })\n\n  componentDidMount() {\n    //this.createPeer();\n  }\n\n  createPeer = (init = true) => {\n    this.peer = new SimplePeer({\n      initiator: init,\n      trickle: false\n    })\n\n    this.peer.on('error', (err: Error) => console.log('error', err));\n\n    this.peer.on('signal', (data: any) => {\n      console.log('SIGNAL', data);\n      this.setState({ data: JSON.stringify(data, null, 2) });\n    })\n\n    this.peer.on('connect', () => {\n      console.log('CONNECT');\n      this.setState({ connected: true, data: '' })\n      this.peer.send('any' + Math.random());\n    })\n\n    this.peer.on('data', (data: any) => {\n      console.log('data: ' + data);\n      this.setState({ data: String(data) })\n    })\n  }\n\n  initConnection = () => this.createPeer(true);\n  joinConnection = () => this.createPeer(false);\n\n  onSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    this.signalOrMessage();\n  }\n\n  signalOrMessage = () => {\n    if (!this.peer) return;\n    console.log(this.state.connected)\n    if (this.state.connected) return this.peer.send(this.state.textInput);\n    this.peer.signal(JSON.parse(this.state.textInput));\n  }\n\n  public render() {\n    return (\n      <div>\n        <header>\n          <p>\n            {this.state.connected ?\n              'connection created'\n              :\n              'waiting for connection'\n            }\n          </p>\n        </header>\n        <button onClick={this.initConnection}>init connection</button>\n        <button onClick={this.joinConnection}>join connection</button>\n        <form onSubmit={this.onSubmit}>\n          <textarea name='textInput' value={this.state.textInput} cols={60} rows={10} onChange={this.onChange} />\n          <input type=\"submit\" value=\"submit\" />\n        </form>\n        {this.state.data &&\n          <>\n            <h3>{this.state.connected ? 'message from your peer' : 'send the json string below to your peer to create a connection'}</h3>\n            <pre>\n              {this.state.data}\n            </pre>\n          </>\n        }\n        <Socket />\n      </div>\n    );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}