{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Schwartza\\\\Desktop\\\\prog2020\\\\reactChat\\\\chat\\\\src\\\\App.tsx\";\nimport React, { Component } from 'react';\nimport Socket from './components/Socket';\nimport './App.css';\nexport default class App extends Component {\n  /* peer: any = null;\n  state = {\n    textInput: '',\n    data: '',\n    connected: false\n  }\n   onChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => this.setState({ [e.target.name]: e.target.value })\n   componentDidMount() {\n    this.createPeer();\n  }\n   createPeer = (init = true) => {\n    this.peer = new SimplePeer({\n      initiator: init,\n      trickle: false\n    })\n     this.peer.on('error', (err: Error) => console.log('error', err));\n     this.peer.on('signal', (data: any) => {\n      console.log('SIGNAL', data);\n      this.setState({ data: JSON.stringify(data, null, 2) });\n    })\n     this.peer.on('connect', () => {\n      console.log('CONNECT');\n      this.setState({ connected: true, data: '' })\n      this.peer.send('any' + Math.random());\n    })\n     this.peer.on('data', (data: any) => {\n      console.log('data: ' + data);\n      this.setState({ data: String(data) })\n    })\n  }\n   initConnection = () => this.createPeer(true);\n  joinConnection = () => this.createPeer(false);\n   onSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    this.signalOrMessage();\n  }\n   signalOrMessage = () => {\n    if (!this.peer) return;\n    console.log(this.state.connected)\n    if (this.state.connected) return this.peer.send(this.state.textInput);\n    this.peer.signal(JSON.parse(this.state.textInput));\n  }\n  */\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, this.state.connected ? 'connection created' : 'waiting for connection')), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.initConnection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, \"init connection\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.joinConnection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \"join connection\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      name: \"textInput\",\n      value: this.state.textInput,\n      cols: 60,\n      rows: 10,\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    })), this.state.data && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, this.state.connected ? 'message from your peer' : 'send the json string below to your peer to create a connection'), /*#__PURE__*/React.createElement(\"pre\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, this.state.data)), /*#__PURE__*/React.createElement(Socket, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Schwartza/Desktop/prog2020/reactChat/chat/src/App.tsx"],"names":["React","Component","Socket","App","render","state","connected","initConnection","joinConnection","onSubmit","textInput","onChange","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAO,WAAP;AAQA,eAAe,MAAMC,GAAN,SAAkBF,SAAlB,CAAuC;AACpD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDOG,EAAAA,MAAP,GAAgB;AACd,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKC,KAAL,CAAWC,SAAX,GACC,oBADD,GAGC,wBAJJ,CADF,CADF,eAUE;AAAQ,MAAA,OAAO,EAAE,KAAKC,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAVF,eAWE;AAAQ,MAAA,OAAO,EAAE,KAAKC,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAXF,eAYE;AAAM,MAAA,QAAQ,EAAE,KAAKC,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAU,MAAA,IAAI,EAAC,WAAf;AAA2B,MAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWK,SAA7C;AAAwD,MAAA,IAAI,EAAE,EAA9D;AAAkE,MAAA,IAAI,EAAE,EAAxE;AAA4E,MAAA,QAAQ,EAAE,KAAKC,QAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAZF,EAgBG,KAAKN,KAAL,CAAWO,IAAX,iBACC,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKP,KAAL,CAAWC,SAAX,GAAuB,wBAAvB,GAAkD,gEAAvD,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKD,KAAL,CAAWO,IADd,CAFF,CAjBJ,eAwBE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBF,CADF;AA4BD;;AAnFmD","sourcesContent":["import React, { Component } from 'react';\nimport SimplePeer from 'simple-peer';\nimport Socket from './components/Socket'\nimport './App.css';\n\n\n\n\nexport interface IAppProps {\n}\n\nexport default class App extends Component<IAppProps> {\n  /* peer: any = null;\n  state = {\n    textInput: '',\n    data: '',\n    connected: false\n  }\n\n  onChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => this.setState({ [e.target.name]: e.target.value })\n\n  componentDidMount() {\n    this.createPeer();\n  }\n\n  createPeer = (init = true) => {\n    this.peer = new SimplePeer({\n      initiator: init,\n      trickle: false\n    })\n\n    this.peer.on('error', (err: Error) => console.log('error', err));\n\n    this.peer.on('signal', (data: any) => {\n      console.log('SIGNAL', data);\n      this.setState({ data: JSON.stringify(data, null, 2) });\n    })\n\n    this.peer.on('connect', () => {\n      console.log('CONNECT');\n      this.setState({ connected: true, data: '' })\n      this.peer.send('any' + Math.random());\n    })\n\n    this.peer.on('data', (data: any) => {\n      console.log('data: ' + data);\n      this.setState({ data: String(data) })\n    })\n  }\n\n  initConnection = () => this.createPeer(true);\n  joinConnection = () => this.createPeer(false);\n\n  onSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    this.signalOrMessage();\n  }\n\n  signalOrMessage = () => {\n    if (!this.peer) return;\n    console.log(this.state.connected)\n    if (this.state.connected) return this.peer.send(this.state.textInput);\n    this.peer.signal(JSON.parse(this.state.textInput));\n  }\n */\n  public render() {\n    return (\n      <div>\n        <header>\n          <p>\n            {this.state.connected ?\n              'connection created'\n              :\n              'waiting for connection'\n            }\n          </p>\n        </header>\n        <button onClick={this.initConnection}>init connection</button>\n        <button onClick={this.joinConnection}>join connection</button>\n        <form onSubmit={this.onSubmit}>\n          <textarea name='textInput' value={this.state.textInput} cols={60} rows={10} onChange={this.onChange} />\n          <input type=\"submit\" value=\"submit\" />\n        </form>\n        {this.state.data &&\n          <>\n            <h3>{this.state.connected ? 'message from your peer' : 'send the json string below to your peer to create a connection'}</h3>\n            <pre>\n              {this.state.data}\n            </pre>\n          </>\n        }\n        <Socket />\n      </div>\n    );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}